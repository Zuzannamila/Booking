// <auto-generated />
using System;
using Booking.Dal.EfStructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking.Dal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250826212809_RemovePhotoNavigation")]
    partial class RemovePhotoNavigation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Booking.Models.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(95);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(97);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(99);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(96);

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Booking.Models.Entities.ServiceCategory", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories", "dbo");
                });

            modelBuilder.Entity("Booking.Models.Entities.ServiceSubCategory", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ServiceSubCategories", "dbo");
                });

            modelBuilder.Entity("Booking.Models.Entities.Client", b =>
                {
                    b.HasBaseType("Booking.Models.Entities.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnOrder(1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Clients", "dbo");
                });

            modelBuilder.Entity("Booking.Models.Entities.Photo", b =>
                {
                    b.HasBaseType("Booking.Models.Entities.BaseEntity");

                    b.Property<string>("BlobKey")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnOrder(1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnOrder(4);

                    b.Property<string>("MediumKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<byte>("OwnerType")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(8);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("ThumbKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(10);

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.ToTable("Photos", "dbo");
                });

            modelBuilder.Entity("Booking.Models.Entities.Professional", b =>
                {
                    b.HasBaseType("Booking.Models.Entities.BaseEntity");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasIndex("VenueId");

                    b.ToTable("Professionals", "dbo");
                });

            modelBuilder.Entity("Booking.Models.Entities.Venue", b =>
                {
                    b.HasBaseType("Booking.Models.Entities.BaseEntity");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnOrder(1);

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.ToTable("Venues", "dbo");
                });

            modelBuilder.Entity("Booking.Models.Entities.Visit", b =>
                {
                    b.HasBaseType("Booking.Models.Entities.BaseEntity");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("ProfessionalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<string>("ServiceNameSnapshot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(7);

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8);

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("VenueId");

                    b.ToTable("Visits", "dbo");
                });

            modelBuilder.Entity("Booking.Models.Entities.ServiceSubCategory", b =>
                {
                    b.HasOne("Booking.Models.Entities.ServiceCategory", "CategoryNavigation")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("Booking.Models.Entities.Professional", b =>
                {
                    b.HasOne("Booking.Models.Entities.Venue", "VenueNavigation")
                        .WithMany("Professionals")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsMany("Booking.Models.Entities.Owned.OpeningHours", "Schedules", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Day")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("End")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("Start")
                                .HasColumnType("time");

                            b1.HasKey("ProfessionalId", "Id");

                            b1.ToTable("ProfessionalSchedules", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.Navigation("Schedules");

                    b.Navigation("VenueNavigation");
                });

            modelBuilder.Entity("Booking.Models.Entities.Venue", b =>
                {
                    b.OwnsOne("Booking.Models.Entities.Owned.Address", "AddressInformation", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City")
                                .HasColumnOrder(82);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Country")
                                .HasColumnOrder(85);

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("PostCode")
                                .HasColumnOrder(83);

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Province")
                                .HasColumnOrder(84);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Street")
                                .HasColumnOrder(80);

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Unit")
                                .HasColumnOrder(81);

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_Timestamp")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("Timestamp");

                            b1.HasKey("VenueId");

                            b1.ToTable("Venues", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("VenueId");
                        });

                    b.OwnsMany("Booking.Models.Entities.Owned.Service", "Services", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<short?>("CategoryId")
                                .HasColumnType("smallint");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<short?>("SubCategoryId")
                                .HasColumnType("smallint");

                            b1.HasKey("VenueId", "Id");

                            b1.HasIndex("CategoryId");

                            b1.HasIndex("SubCategoryId");

                            b1.ToTable("VenueServices", "dbo");

                            b1.HasOne("Booking.Models.Entities.ServiceCategory", "CategoryNavigation")
                                .WithMany()
                                .HasForeignKey("CategoryId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Booking.Models.Entities.ServiceSubCategory", "SubCategoryNavigation")
                                .WithMany()
                                .HasForeignKey("SubCategoryId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("VenueId");

                            b1.Navigation("CategoryNavigation");

                            b1.Navigation("SubCategoryNavigation");
                        });

                    b.OwnsMany("Booking.Models.Entities.Owned.OpeningHours", "OpeningHours", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Day")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("End")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("Start")
                                .HasColumnType("time");

                            b1.HasKey("VenueId", "Id");

                            b1.ToTable("VenueOpeningHours", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("VenueId");
                        });

                    b.Navigation("AddressInformation")
                        .IsRequired();

                    b.Navigation("OpeningHours");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Booking.Models.Entities.Visit", b =>
                {
                    b.HasOne("Booking.Models.Entities.Client", "ClientNavigation")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Models.Entities.Professional", "ProfessionalNavigation")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Booking.Models.Entities.Venue", "VenueNavigation")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientNavigation");

                    b.Navigation("ProfessionalNavigation");

                    b.Navigation("VenueNavigation");
                });

            modelBuilder.Entity("Booking.Models.Entities.ServiceCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Booking.Models.Entities.Venue", b =>
                {
                    b.Navigation("Professionals");
                });
#pragma warning restore 612, 618
        }
    }
}
